<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Golang三色标记、混合写屏障GC模式图文全分析</title>
    <url>/2021/01/28/golang-gc/</url>
    <content><![CDATA[<blockquote>
<p>垃圾回收(Garbage Collection，简称GC)是编程语言中提供的自动的内存管理机制，自动释放不需要的对象，让出存储器资源，无需程序员手动执行。</p>
<p>Golang中的垃圾回收主要应用三色标记法，GC过程和其他用户goroutine可并发运行，但需要一定时间的STW(stop the world)，STW的过程中，CPU不执行用户代码，全部用于垃圾回收，这个过程的影响很大，Golang进行了多次的迭代优化来解决这个问题。</p>
</blockquote>
<h2 id="内容提纲"><a href="#内容提纲" class="headerlink" title="内容提纲"></a>内容提纲</h2><ul>
<li>G0 V1.3之前的标记-清除(mark and sweep)算法</li>
<li>Go V1.3之前的标记-清扫(mark and sweep)的缺点</li>
<li>Go V1.5的三色并发标记法</li>
<li>Go V1.5的三色标记为什么需要STW</li>
<li>Go V1.5的三色标记为什么需要屏障机制(“强-弱” 三色不变式、插入屏障、删除屏障 )</li>
<li>Go V1.8混合写屏障机制</li>
<li>Go V1.8混合写屏障机制的全场景分析</li>
</ul>
<h2 id="Go-V1-3之前的标记-清除-mark-and-sweep-算法"><a href="#Go-V1-3之前的标记-清除-mark-and-sweep-算法" class="headerlink" title="Go V1.3之前的标记-清除(mark and sweep)算法"></a>Go V1.3之前的标记-清除(mark and sweep)算法</h2><p>此算法主要有两个主要的步骤：</p>
<ul>
<li>标记(Mark phase)</li>
<li>清除(Sweep phase)</li>
</ul>
<p><strong>第一步</strong> 暂停程序业务逻辑<br>操作非常简单，但是有一点需要额外注意：mark and sweep算法在执行的时候，需要程序暂停，即<code>STW(stop the world)</code>。<br>也就是说，这段时间程序会卡在那儿。<br><img src="mas-1.png" alt="setp-1"></p>
<p><strong>第二步</strong> 开始标记，程序找出它所有可达的对象，并做上标记<br><img src="mas-2.png" alt="setp-2"></p>
<p><strong>第三步</strong> 标记完了之后，然后开始清除未标记的对象<br><img src="mas-3.png" alt="setp-3"></p>
<p><strong>第四步</strong> 停止暂停，让程序继续跑。<br>然后循环重复这个过程，直到process程序生命周期结束。</p>
<h2 id="标记-清扫-mark-and-sweep-的缺点"><a href="#标记-清扫-mark-and-sweep-的缺点" class="headerlink" title="标记-清扫(mark and sweep)的缺点"></a>标记-清扫(mark and sweep)的缺点</h2><ul>
<li><code>STW(stop the world)</code> 让程序暂停，程序出现卡顿 (<code>重要问题</code>)。</li>
<li>标记需要扫描整个heap</li>
<li>清除数据会产生heap碎片</li>
</ul>
<p>Go V1.3版本之前就是以上来实施的, 流程是<br><img src="mas-4.png" alt="before v1.3"></p>
<p>Go V1.3 做了简单的优化,将STW提前, 减少STW暂停的时间范围<br><img src="mas-5.png" alt="v1.3"></p>
<p><strong>这里面最重要的问题就是：mark-and-sweep 算法会暂停整个程序</strong></p>
<p>Go是如何面对并这个问题的呢？接下来Go V1.5版本 就用<code>三色并发标记法</code>来优化这个问题.</p>
<h2 id="Go-V1-5的三色并发标记法"><a href="#Go-V1-5的三色并发标记法" class="headerlink" title="Go V1.5的三色并发标记法"></a>Go V1.5的三色并发标记法</h2><p>三色标记法 实际上就是通过三个阶段的标记来确定清楚的对象都有哪些. 我们来看一下具体的过程.</p>
<h2 id="没有STW的三色标记法"><a href="#没有STW的三色标记法" class="headerlink" title="没有STW的三色标记法"></a>没有STW的三色标记法</h2><h2 id="屏障机制"><a href="#屏障机制" class="headerlink" title="屏障机制"></a>屏障机制</h2><h2 id="Go-V1-8的混合写屏障-hybrid-write-barrier-机制"><a href="#Go-V1-8的混合写屏障-hybrid-write-barrier-机制" class="headerlink" title="Go V1.8的混合写屏障(hybrid write barrier)机制"></a>Go V1.8的混合写屏障(hybrid write barrier)机制</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上便是Golang的GC全部的标记-清除逻辑及场景演示全过程。</p>
<p>GoV1.3- 普通标记清除法，整体过程需要启动STW，效率极低。<br>GoV1.5- 三色标记法， 堆空间启动写屏障，栈空间不启动，全部扫描之后，需要重新扫描一次栈(需要STW)，效率普通<br>GoV1.8-三色标记法，混合写屏障机制， 栈空间不启动，堆空间启动。整个过程几乎不需要STW，效率较高。</p>
<p>参考文献:</p>
<ul>
<li><a href="https://www.cnblogs.com/wangyiyang/p/12191591.html">https://www.cnblogs.com/wangyiyang/p/12191591.html</a></li>
<li><a href="https://www.jianshu.com/p/eb6b3aff9ca5">https://www.jianshu.com/p/eb6b3aff9ca5</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/74853110">https://zhuanlan.zhihu.com/p/74853110</a></li>
</ul>
<p><strong>原文作者:</strong> <a href="https://segmentfault.com/u/aceld">刘丹冰 Aceld</a><br><strong>原文地址:</strong> <a href="https://segmentfault.com/a/1190000022030353">Golang三色标记、混合写屏障GC模式图文全分析</a></p>
]]></content>
      <tags>
        <tag>golang</tag>
        <tag>gc</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/01/29/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
